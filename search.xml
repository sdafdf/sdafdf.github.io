<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试</title>
      <link href="/2024/12/08/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/12/08/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一个测试"><a href="#这是一个测试" class="headerlink" title="这是一个测试"></a>这是一个测试</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker中使用gpu</title>
      <link href="/2024/07/20/docker%E4%B8%AD%E4%BD%BF%E7%94%A8gpu/"/>
      <url>/2024/07/20/docker%E4%B8%AD%E4%BD%BF%E7%94%A8gpu/</url>
      
        <content type="html"><![CDATA[<h1 id="docker中使用gpu"><a href="#docker中使用gpu" class="headerlink" title="docker中使用gpu"></a>docker中使用gpu</h1><p>想要在docker中使用gpu，通常可以通过直接挂载gpu、使用nvidia-docker2和nvidia-container-runtime。其中nvidia-docker2官方已经不再维护；下面主要介绍直接挂载设备和nvidia-container-runtime的方式。</p><h2 id="1、直接挂载"><a href="#1、直接挂载" class="headerlink" title="1、直接挂载"></a>1、直接挂载</h2><p>在Docker守护进程启动时，可以通过<code>--device</code>参数直接指定GPU设备。这种方式比较直接，但不如NVIDIA Container runtime灵活和方便管理。示例命令如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --device=/dev/nvidia0:/dev/nvidia0 --device=/dev/nvidiactl:/dev/nvidiactl --device=/dev/nvidia-uvm:/dev/nvidia-uvm --device=/dev/nvidia-uvm-tools:/dev/nvidia-uvm-tools nvidia/cuda nvidia-smi</span><br></pre></td></tr></table></figure><h2 id="2、通过nvidia-container-runtime"><a href="#2、通过nvidia-container-runtime" class="headerlink" title="2、通过nvidia-container-runtime"></a>2、通过nvidia-container-runtime</h2><p>新建shell脚本，内容如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey | \</span><br><span class="line">  sudo apt-key add -</span><br><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-container-runtime/$distribution/nvidia-container-runtime.list | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/nvidia-container-runtime.list</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>执行脚本成功后，再执行以下命令开始安装nvidia-container-runtime</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nvidia-container-runtime</span><br><span class="line">systemctl restart docker #重启docker</span><br></pre></td></tr></table></figure><p>测试验证：</p><p>先拉取一下nvidia&#x2F;cuda这个镜像，这是官方提供的一个镜像，里面包含了cuda工具包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker pull nvidia/cuda:11.0-base</span><br></pre></td></tr></table></figure><p>然后在启动镜像，添加 –gpus all或者 –gpus ”device&#x3D;1“指定gpu</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --gpus all --rm nvidia/cuda:11.0-base nvidia-smi</span><br></pre></td></tr></table></figure><p>如果成功打印出nvidia-smi的信息，则表示安装成功，现在可以愉快的在docker中使用gpu了。</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>T4 算力卡安装驱动</title>
      <link href="/2024/07/20/T4-%E7%AE%97%E5%8A%9B%E5%8D%A1%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/"/>
      <url>/2024/07/20/T4-%E7%AE%97%E5%8A%9B%E5%8D%A1%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="安装NVIDIA-T4驱动"><a href="#安装NVIDIA-T4驱动" class="headerlink" title="安装NVIDIA T4驱动"></a>安装NVIDIA T4驱动</h1><p>安装驱动之前先安装依赖：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install epel-release</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install pkgconfig libglvnd-devel</span><br></pre></td></tr></table></figure><p>在官网下载驱动，然后给驱动赋予权限后执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x NVIDIA-Linux-x86_64-535.161.08.run</span><br><span class="line">sh ./NVIDIA-Linux-x86_64-535.161.08.run -s  --no-x-check</span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>只要执行nvidia-smi后出现下图，表示驱动安装完成。</p><img src="/2024/07/20/T4-%E7%AE%97%E5%8A%9B%E5%8D%A1%E5%AE%89%E8%A3%85%E9%A9%B1%E5%8A%A8/1b7ff550af5044f9b51525881beca7f5.png" class="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装docker</title>
      <link href="/2024/07/20/Ubuntu%E5%AE%89%E8%A3%85docker/"/>
      <url>/2024/07/20/Ubuntu%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu22-04安装docker"><a href="#Ubuntu22-04安装docker" class="headerlink" title="Ubuntu22.04安装docker"></a>Ubuntu22.04安装docker</h1><p>1、首先，更新软件包索引，并且安装必要的依赖</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br></pre></td></tr></table></figure><p>2、导入GPG key：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"># 目前docker在国内处于被封禁状态，docker官方访问不稳定，可以使用阿里源来代替</span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>3、将docker APT软件源添加到系统</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"></span><br><span class="line">#阿里源</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br></pre></td></tr></table></figure><p>4、开始安装docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>6、启动docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line"></span><br><span class="line"># 如果是wsl，则无法通过systemctl启动，wsl启动方式如下</span><br><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><p>7、查看docker状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><p>8、将当前用户添加到docker组，可以避免每次使用docker时都需要sudo权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker &amp;USER</span><br></pre></td></tr></table></figure><p>9、重启docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure><h1 id="sudo-service-docker-start显示-OK-但是-Docker-is-not-running问题"><a href="#sudo-service-docker-start显示-OK-但是-Docker-is-not-running问题" class="headerlink" title="sudo service docker start显示[OK]但是* Docker is not running问题"></a><font color=Red>sudo service docker start显示[OK]但是* Docker is not running问题</font></h1><p><font color=Red>首先，需要添加fstab文件，因为由于某种原因不存在或者无法读取</font></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch /etc/fstab</span><br></pre></td></tr></table></figure><p><font color=Red>由于网络控制器错误，所以需要从nftables切换到iptables</font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-alternatives --set iptables /usr/sbin/iptables-legacy</span><br><span class="line">update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy</span><br></pre></td></tr></table></figure><p><font color=Red>完成后重新启动docker即可</font></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>离线安装docker</title>
      <link href="/2024/07/20/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/"/>
      <url>/2024/07/20/%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h1 id="离线安装docker"><a href="#离线安装docker" class="headerlink" title="离线安装docker"></a>离线安装docker</h1><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>首先需要下载docker的离线安装包，地址为<a href="https://download.docker.com/linux/static/stable/x86_64/">Index of linux&#x2F;static&#x2F;stable&#x2F;x86_64&#x2F; (docker.com)</a></p><h2 id="制作docker-service文件"><a href="#制作docker-service文件" class="headerlink" title="制作docker.service文件"></a>制作docker.service文件</h2><p>在压缩包的同目录下，创建docker.service文件，文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="line"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="line"># for containers run by docker</span><br><span class="line">ExecStart=/usr/bin/dockerd --selinux-enabled=false --insecure-registry=192.168.205.230</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="line"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"># Uncomment TasksMax if your systemd version supports it.</span><br><span class="line"># Only systemd 226 and above support this version.</span><br><span class="line">#TasksMax=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><br><span class="line">Delegate=yes</span><br><span class="line"># kill only the docker process, not all processes in the cgroup</span><br><span class="line">KillMode=process</span><br><span class="line"># restart the docker process if it exits prematurely</span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><font color=red>注意，将其中的ip地址，改成您的服务器地址，其它参数不用改。–insecure-registry&#x3D;192.168.205.230</font></p><h2 id="制作安装脚本"><a href="#制作安装脚本" class="headerlink" title="制作安装脚本"></a>制作安装脚本</h2><p>创建install.sh文件，内容如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否提供了足够的参数</span></span><br><span class="line">if [ &quot;$#&quot; -ne 2 ]; then</span><br><span class="line">    echo &quot;使用方法: $0 &lt;docker_tar_path&gt; &lt;docker_service_path&gt;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压tar包</span></span><br><span class="line">echo &#x27;解压tar包&#x27;</span><br><span class="line">tar -xvf &quot;$1&quot;</span><br><span class="line">echo &#x27;将docker目录下所有文件复制到/usr/bin目录&#x27;</span><br><span class="line">cp docker/* /usr/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制docker.service到Systemd目录</span></span><br><span class="line">echo &#x27;将docker.service 复制到/etc/systemd/system/目录&#x27;</span><br><span class="line">cp &quot;$2&quot; /etc/systemd/system/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加文件可执行权限</span></span><br><span class="line">echo &#x27;添加文件可执行权限&#x27;</span><br><span class="line">chmod +x /etc/systemd/system/docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载配置文件</span></span><br><span class="line">echo &#x27;重新加载配置文件&#x27;</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动docker</span></span><br><span class="line">echo &#x27;启动docker&#x27;</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">echo &#x27;设置开机自启&#x27;</span><br><span class="line">systemctl enable docker.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查Docker是否安装成功</span></span><br><span class="line">echo &#x27;docker安装成功&#x27;</span><br><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>给install.sh文件赋予可执行权限</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后执行install.sh</span></span><br><span class="line">sh install.sh docker-xxx.tgz  docker.service</span><br></pre></td></tr></table></figure><p>根据安装脚本内容，如果最后成功打印出docker版本，即代表完成安装。</p><h2 id="制作卸载脚本"><a href="#制作卸载脚本" class="headerlink" title="制作卸载脚本"></a>制作卸载脚本</h2><p>同安装脚本一样，先创建uninstall.sh文件，然后向文件中写入以下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">echo &#x27;停止docker&#x27;</span><br><span class="line">systemctl stop docker</span><br><span class="line">echo &#x27;删除docker.service&#x27;</span><br><span class="line">rm -f /etc/systemd/system/docker.service</span><br><span class="line">echo &#x27;删除docker文件&#x27;</span><br><span class="line">rm -rf /usr/bin/docker*</span><br><span class="line">echo &#x27;重新加载配置文件&#x27;</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">echo &#x27;卸载成功&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>muduo网络库解析-第二章</title>
      <link href="/2024/06/19/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2024/06/19/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="好的网络服务器如何设计？"><a href="#好的网络服务器如何设计？" class="headerlink" title="好的网络服务器如何设计？"></a>好的网络服务器如何设计？</h1><blockquote><p>libev作者认为：one loop per thread is usually a good model</p></blockquote><p>这样多线程服务端编程的问题就转换为了如何设计一个高效且易于使用的event loop，然后每个线程运行一个event loop即可。</p><p>event loop是非阻塞网络编程的核心，在实际应用中，非阻塞几乎总是和IO复用配合使用的，主要原因有两点：</p><ul><li>使用轮询的方式检查某个IO操作是否完成，这样太消耗CPU资源</li><li>IO复用一般不能和阻塞IO用在一起，因为阻塞式IO中read()、write()、accept()、connect()都有可能阻塞当前线程，这样线程就没办法处理其他的socket上的IO事件。</li></ul><p>所以，平常提到的非阻塞IO一般都指的是非阻塞IO+IO复用，单独的使用其中任何一个都没有办法很好的实现功能。</p><blockquote><p>epoll+fork不如epoll+pthread？</p></blockquote><p>强大的nginx服务器采用了epoll+fork模型作为网络模块的架构设计，实现了简单好用的负载算法，使 各个fork网络进程不会忙的越忙、闲的越闲，并且通过引入一把乐观锁解决了该模型导致的服务器惊群 现象，功能十分强大。</p><h1 id="Reactor模型"><a href="#Reactor模型" class="headerlink" title="Reactor模型"></a>Reactor模型</h1><p><strong>重要组件：</strong>Event事件、Reactor反应堆、Demultiplex事件分发器、Evanthandler事件处理器</p><img src="/2024/06/19/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%BA%8C%E7%AB%A0/image-20240619223106590.png" class="" title="image-20240619223106590">]]></content>
      
      
      <categories>
          
          <category> muduo网络库剖析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> muduo,C++,网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客图片显示问题</title>
      <link href="/2024/06/18/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2024/06/18/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在本地markdown编辑时插入的图片，经过hexo g编译后在博客上无法显示。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>使用hexo-asset-img插件 即可实现 <a href="https://so.csdn.net/so/search?q=Typora&spm=1001.2101.3001.7020">Typora</a> 等 Markdown 编辑器预览 与 Hexo 发布预览 均能正常显示图片。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><p>在站点配置文件中将post_asset_folder设置为true，这样在新建文章时会同时生成一个和md文件同名的文件夹，这个文件夹用于存放该篇文章的图片资源。目录结构如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo-typora</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.png</span><br><span class="line">└── rules.jpg</span><br><span class="line">hexo-typora.md</span><br></pre></td></tr></table></figure><p>另外，在typora中插入图片时需要使用相对路径，并且使用“&#x2F;”而不是“\”。如下</p><img src="/2024/06/18/hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/QQ%E6%88%AA%E5%9B%BE20240618230637.png" class=""><p>经过测试，该方法有效。</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>muduo网络库解析-第一章</title>
      <link href="/2024/06/18/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2024/06/18/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul><li>理解阻塞、非阻塞、同步、异步</li><li>理解Linux的物种I&#x2F;O模型</li><li>理解epoll的原理和优势</li><li>深刻理解Reactor模式</li></ul><h1 id="阻塞、非阻塞、同步、异步"><a href="#阻塞、非阻塞、同步、异步" class="headerlink" title="阻塞、非阻塞、同步、异步"></a>阻塞、非阻塞、同步、异步</h1><blockquote><p>典型的一次I&#x2F;O的两个阶段是什么？</p><p>数据准备和数据读写</p></blockquote><p><strong>数据准备：</strong>根据系统I&#x2F;O操作的就绪状态</p><ul><li>阻塞：指在调用某个函数或方法时，如果该函数或方法不能立即返回结果（如数据未就绪、需要等待外部事件等），则当前线程或进程会被挂起，无法执行其他任务，直到该函数或方法返回结果为止。</li><li>非阻塞：指在调用某个函数或方法时，即使该函数或方法不能立即返回结果，当前线程或进程也不会被挂起，而是可以继续执行其他任务。通常，非阻塞调用会返回一个状态值或错误码，调用者需要定时轮询或注册回调函数来检查操作状态或获取结果。</li></ul><blockquote><p>在处理 IO 的时候，阻塞和非阻塞都是同步 IO。只有使用了特殊的 API 才是异步 IO。</p></blockquote><img src="/2024/06/18/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/1.png" class=""><blockquote><p>一个典型的网络IO接口调用，分为两个阶段，分别是“数据就绪”和“数据读写”，数据就绪阶 段分为阻塞和非阻塞，表现得结果就是，阻塞当前线程或是直接返回。 同步表示A向B请求调用一个网络IO接口时（或者调用某个业务逻辑API接口时），数据的读写都 是由请求方A自己来完成的（不管是阻塞还是非阻塞）；异步表示A向B请求调用一个网络IO接口 时（或者调用某个业务逻辑API接口时），向B传入请求的事件以及事件发生时通知的方式，A就 可以处理其它逻辑了，当B监听到事件处理完成后，会用事先约定好的通知方式，通知A处理结 果。</p></blockquote><h1 id="Linux上的五种I-O模型"><a href="#Linux上的五种I-O模型" class="headerlink" title="Linux上的五种I&#x2F;O模型"></a>Linux上的五种I&#x2F;O模型</h1><h2 id="阻塞blocking"><a href="#阻塞blocking" class="headerlink" title="阻塞blocking"></a>阻塞blocking</h2><img src="/2024/06/18/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/blocking.png" class=""><h2 id="非阻塞non-blocking"><a href="#非阻塞non-blocking" class="headerlink" title="非阻塞non-blocking"></a>非阻塞non-blocking</h2><img src="/2024/06/18/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/%E9%9D%9E%E9%98%BB%E5%A1%9E.png" class=""><h2 id="IO复用（IO-multiplexing）"><a href="#IO复用（IO-multiplexing）" class="headerlink" title="IO复用（IO multiplexing）"></a>IO复用（IO multiplexing）</h2><img src="/2024/06/18/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/IO%E5%A4%8D%E7%94%A8.png" class=""><h2 id="信号驱动（siganl-driven）"><a href="#信号驱动（siganl-driven）" class="headerlink" title="信号驱动（siganl-driven）"></a>信号驱动（siganl-driven）</h2><img src="/2024/06/18/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8.png" class=""><p>内核在第一个阶段是异步，在第二个阶段是同步；与非阻塞IO的区别在于它提供了消息通知机制，不需 要用户进程不断的轮询检查，减少了系统API的调用次数，提高了效率。</p><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><img src="/2024/06/18/muduo%E7%BD%91%E7%BB%9C%E5%BA%93%E8%A7%A3%E6%9E%90-%E7%AC%AC%E4%B8%80%E7%AB%A0/%E5%BC%82%E6%AD%A5.png" class="">]]></content>
      
      
      <categories>
          
          <category> muduo网络库剖析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++基础第一篇</title>
      <link href="/2024/06/15/CPP%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
      <url>/2024/06/15/CPP%E5%9F%BA%E7%A1%80%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本节介绍C++输入输出流和基本的变量</p><h2 id="iostream"><a href="#iostream" class="headerlink" title="iostream"></a>iostream</h2><p>C++提供了标准的输入和输出流功能,要包含iostream头文件，就可以使用cin和cout了 cin表示输入，cout表示输出，下面是使用案例</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cin_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string input;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;input your words &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; input;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;your input is &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; input &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input your words</span><br><span class="line">zack</span><br><span class="line">your input is</span><br><span class="line">zack</span><br></pre></td></tr></table></figure><p><code>&gt;&gt;</code> 会获取输入写入缓存,并返回cin对象，<code>&lt;&lt;</code>会从缓存中读取数据写入cout并返回cout,最后endl会将cout缓存中的数据输出到终端。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">var_func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//整形，4字节</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//ll整形, 8字节</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> lla = <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">//长整型， 4 字节</span></span><br><span class="line">    <span class="type">long</span> la = <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">//短整型,2 字节</span></span><br><span class="line">    <span class="type">short</span> sa = <span class="number">200</span>;</span><br><span class="line">    <span class="comment">//带符号字符型,</span></span><br><span class="line">    <span class="comment">//字符型使用时最好指示带符号还是不带符号</span></span><br><span class="line">    <span class="comment">//因为在不同的机器上不指明char符号可能会有问题</span></span><br><span class="line">    <span class="type">signed</span> <span class="type">char</span> sc = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="comment">//无符号字符型</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> uc = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">    <span class="comment">//bool类型</span></span><br><span class="line">    <span class="type">bool</span> bt = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>当我们把一个非布尔类型的算术值赋给布尔类型时，初始值为0则结果为false，否则结果为true。 当我们把一个布尔值赋给非布尔类型时，初始值为false则结果为0，初始值为true则结果为1。 当我们把一个浮点数赋给整数类型时，进行了近似处理。结果值将仅保留浮点数中小数点之前的部分。 当我们把一个整数值赋给浮点类型时，小数部分记为0。如果该整数所占的空间超过了浮点类型的容量，精度可能有损失。 当我们赋给无符号类型一个超出它表示范围的值时，结果是初始值对无符号类型表示数值总数取模后的余数。例如，8比特大小的unsigned char可以表示0至255区间内的值，如果我们赋了一个区间以外的值，则实际的结果是该值对256取模后所得的余数。因此，把-1赋给8比特大小的unsigned char所得的结果是255。 当我们赋给带符号类型一个超出它表示范围的值时，结果是未定义的（undefined）。此时，程序可能继续工作、可能崩溃，也可能生成垃圾数据。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> b = <span class="number">42</span>; <span class="comment">//b为true</span></span><br><span class="line"><span class="type">int</span> i = b; <span class="comment">//i 为1</span></span><br><span class="line">i = <span class="number">3.14</span>; <span class="comment">//i 为3</span></span><br><span class="line"><span class="type">double</span> pi = i; <span class="comment">//pi为3.0</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c = <span class="number">-1</span>; <span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="变量的声明和定义"><a href="#变量的声明和定义" class="headerlink" title="变量的声明和定义"></a>变量的声明和定义</h2><p>用extern在头文件声明，在cpp中定义，可以保证变量不会被重复包含</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只声明a</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a;</span><br></pre></td></tr></table></figure><p>如果extern后边做了赋值操作，则不是声明而是定义</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a= <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p>不带extern 直接类型+ 变量名就是定义</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如下都是定义</span></span><br><span class="line"><span class="type">int</span> age = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> num ;</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用就是变量的别名，通过修改引用达到修改变量的值的目的</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// i 是j的引用</span></span><br><span class="line"><span class="type">int</span> &amp;i = j;</span><br><span class="line">j = <span class="number">200</span>;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
